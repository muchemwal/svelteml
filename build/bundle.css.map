{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n\n  import * as tf from \"@tensorflow/tfjs\";\n\n  import * as tmImage from \"@teachablemachine/image\";\n\n  let videoEl;\n  let errorMessage;\n  let model;\n  let loading = true;\n  let percentage = \"\";\n  let name = \"\";\n  let backgroundColor = \"#fff\";\n  let fontColor = \"#000000\";\n\n  const URL = \"model/\";\n  const modelURL = URL + \"model.json\";\n  const metadataURL = URL + \"metadata.json\";\n\n  onMount(async () => {\n    try {\n      model = await tmImage.load(modelURL, metadataURL);\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n\n      videoEl.srcObject = stream;\n      videoEl.play();\n      setInterval(predict, 1000);\n      loading = false;\n    } catch (e) {\n      console.error(e, \"camera access denied\");\n      errorMessage = \"Camera Access Denied\";\n    }\n  });\n\n  $: if (name === \"Healthy\") {\n    backgroundColor = \"#42edb1\";\n    fontColor = \"#045187\";\n  } else if (name === \"Potato healthy\") {\n    backgroundColor = \"#42edb1\";\n    fontColor = \"#045187\";\n  } else {\n    backgroundColor = \"#fff\";\n    fontColor = \"#000000\";\n  }\n\n  async function predict() {\n    const predictions = await model.predict(videoEl);\n    const [choosenPrediction] = predictions.sort(\n      (a, b) => b.probability - a.probability\n    );\n\n    if (choosenPrediction) {\n      percentage = (choosenPrediction.probability * 100).toFixed(2) + \"%\";\n      name = classNameToLabel(choosenPrediction.className);\n    }\n  }\n\n  function classNameToLabel(className) {\n    switch (className) {\n      case \"Common_rust\":\n        return \"Common rust\";\n      case \"healthy\":\n        return \"Healthy\";\n\t\t  case \"Northen_leaf_blight\":\n        return \"Northen leaf blight\";\n\t\t  case \"Gray_leaf_spot\":\n        return \"Gray leaf spot\";\n\t\t  case \"Potato_healthy\":\n        return \"Potato healthy\";\n\t\t  case \"Potato_Late_blight\":\n        return \"Potato Late blight\";\n\t\t  case \"Potato_Early_blight\":\n        return \"Potato Early blight\";\n      default:\n        return \"Nothing\";\n    }\n  }\n</script>\n\n<style>\n  main {\n    width: 100%;\n    height: 100vh;\n    padding: 0;\n    box-sizing: border-box;\n    position: absolute;\n  }\n\n  video {\n    display: block;\n    margin: 20px auto;\n  }\n\n  h1,\n  h2 {\n    text-align: center;\n  }\n\n  h1 {\n    font-size: 40px;\n  }\n\n  h2 {\n    font-size: 20px;\n  }\n</style>\n\n<main style=\"background-color: {backgroundColor}; color: {fontColor};\">\n  <h1>Crop disease detector Machine Learning app</h1>\n  <video bind:this={videoEl} width=\"600\" height=\"480\" />\n\n  {#if errorMessage}\n    <h2 style=\"color: red;\">{errorMessage}</h2>\n  {:else if loading}\n    <h2>Loading ...</h2>\n  {:else if percentage && name}\n    <h2>AI {percentage} certain it's a {name}</h2>\n  {/if}\n</main>\n"
  ],
  "names": [],
  "mappings": "AAiFE,IAAI,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,UAAU,CACtB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC,AAED,gBAAE,CACF,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC"
}